// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  premium
  user
}

enum DishStatus {
  ACTIVE
  INACTIVE
}

enum RecurrenceType {
  WEEKLY
  MONTHLY
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  name             String
  lastName         String
  role             UserRole @default(user)
  password         String // Este será hasheado en el servicio
  stripeCustomerId String?  @unique // ID del cliente en Stripe
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones para seguimiento de creación
  createdById  String?
  createdBy    User?   @relation("UserCreations", fields: [createdById], references: [id])
  createdUsers User[]  @relation("UserCreations")

  // Relaciones
  createdDishes     Dish[]             @relation("CreatedBy")
  createdCategories Category[]         @relation("CategoryCreatedBy")
  dailySpecials     DailySpecial[]     @relation("DailySpecialCreatedBy")
  restaurantConfigs RestaurantConfig[] @relation("RestaurantConfigCreatedBy")
  restaurantDesigns RestaurantDesign[] @relation("RestaurantDesignCreatedBy")

  // Relación con permisos
  permissions UserPermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique // e.g., "users:create", "menu:edit"
  description String?
  createdAt   DateTime @default(now())

  // Relación con usuarios
  users UserPermission[]
}

model UserPermission {
  userId       String
  permissionId String
  assignedAt   DateTime @default(now())

  // Relaciones
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  order       Int      @default(0) // Para ordenar las categorías
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  dishes      Dish[]
  createdBy   User   @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  createdById String

  @@unique([name])
}

model Dish {
  id               String     @id @default(uuid())
  name             String
  description      String
  price            Float
  promotionalPrice Float? // Precio promocional opcional
  imageUrl         String?
  status           DishStatus @default(ACTIVE)
  order            Int        @default(0) // Para ordenar los platos dentro de la categoría
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relaciones
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String

  // Platos del día
  dailySpecials DailySpecial[]

  // Items de órdenes
  orderItems OrderItem[]

  @@index([categoryId])
  @@index([status])
}

model DailySpecial {
  id        String   @id @default(uuid())
  date      DateTime @db.Date // Solo la fecha, sin hora
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campos para recurrencia
  recurrenceType     RecurrenceType?
  recurrenceDays     String? // e.g., "1,3,5" for Mon, Wed, Fri
  recurrenceEndDate  DateTime?
  recurrenceParentId String? // ID of the first special in a recurring series

  // Relaciones
  dish        Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId      String
  createdBy   User   @relation("DailySpecialCreatedBy", fields: [createdById], references: [id])
  createdById String

  @@index([date])
  @@index([isActive])
  @@index([recurrenceParentId])
}

model RestaurantConfig {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  hours       String?
  logoUrl     String?
  slug        String   @unique @default("mi-restaurante") // slug único para la URL
  themeColor  String   @default("green") // green, red, blue, yellow, brown
  waiterCode  String   @default("1234") // código para que los mozos accedan
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  createdBy        User              @relation("RestaurantConfigCreatedBy", fields: [createdById], references: [id])
  createdById      String
  restaurantDesign RestaurantDesign?
  orders           Order[]

  @@index([slug])
}

model RestaurantDesign {
  id           String   @id @default(uuid())
  name         String   @default("Mi Diseño")
  elements     Json     @default("[]") // Array de RestaurantElement como JSON
  canvasWidth  Int      @default(800)
  canvasHeight Int      @default(600)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relación con RestaurantConfig (uno a uno)
  restaurantConfig   RestaurantConfig @relation(fields: [restaurantConfigId], references: [id], onDelete: Cascade)
  restaurantConfigId String           @unique

  // Relación con User
  createdBy   User   @relation("RestaurantDesignCreatedBy", fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
  @@index([restaurantConfigId])
}

enum OrderStatus {
  PENDING // Pendiente
  IN_PROGRESS // En preparación
  READY // Listo
  DELIVERED // Entregado
  CANCELLED // Cancelado
}

model Order {
  id          String      @id @default(uuid())
  tableNumber String // Número de mesa
  status      OrderStatus @default(PENDING)
  total       Float       @default(0)
  notes       String? // Notas especiales del pedido
  waiterName  String? // Nombre del mozo que tomó la orden
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  restaurantConfig   RestaurantConfig @relation(fields: [restaurantConfigId], references: [id], onDelete: Cascade)
  restaurantConfigId String
  items              OrderItem[]

  @@index([restaurantConfigId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id       String  @id @default(uuid())
  quantity Int     @default(1)
  price    Float // Precio al momento de la orden
  notes    String? // Notas específicas del item

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  dish    Dish   @relation(fields: [dishId], references: [id])
  dishId  String

  @@index([orderId])
  @@index([dishId])
}
